version: '3.8'

services:
  backend:
    build:
      context: ./server  # Path to your backend project directory
      dockerfile: Dockerfile
    ports:
      - "3001:3001"  # Map backend port (temporary, will be proxied by Nginx)
    environment:
      - DATABASE_URL=postgresql://admin:admin@postgres:5432/ecommerce?schema=public
    depends_on:
      - postgres
    volumes:
      - ./server/uploads:/app/uploads  # Persist uploaded files
    restart: unless-stopped

  client-frontend:
    build:
      context: ./client-frontend  # Path to your client frontend directory
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Map client frontend port (temporary, will be proxied by Nginx)
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3001
    depends_on:
      - backend
    restart: unless-stopped

  admin-frontend:
    build:
      context: ./admin-frontend  # Path to your admin frontend directory
      dockerfile: Dockerfile
    ports:
      - "3002:3000"  # Map admin frontend port (temporary, will be proxied by Nginx)
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3001
    depends_on:
      - backend
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"  # Expose for local testing (remove in production if not needed)
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"  # Expose for local testing (restrict in production)
    depends_on:
      - postgres
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"  # HTTP
      - "443:443"  # HTTPS (for SSL)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Nginx configuration
      - ./nginx/certs:/etc/nginx/certs  # SSL certificates (optional)
    depends_on:
      - backend
      - client-frontend
      - admin-frontend
    restart: unless-stopped

volumes:
  postgres-data: