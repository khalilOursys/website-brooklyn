//npx prisma migrate reset
generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  BULK_CLIENT
  MANAGER
  ADMIN
}

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  password             String
  name                 String?
  role                 Role                @default(CLIENT)
  oauthProvider        String?
  oauthId              String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  orders               Order[]
  cart                 Cart?
  wishlist             Wishlist[]
  notifications        Notification[]
  bulkRequests         BulkClientRequest?
  ratings              ProductRating[]
  stockAlerts          StockAlert[]
  reviewedBulkRequests BulkClientRequest[] @relation("ReviewedBulkRequests")
}

model BulkClientRequest {
  id           String    @id @default(uuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  storeName    String
  legalDocs    String
  status       String    @default("pending")
  reviewedById String?
  reviewedBy   User?     @relation("ReviewedBulkRequests", fields: [reviewedById], references: [id])
  submittedAt  DateTime  @default(now())
  reviewedAt   DateTime?
}

model Product {
  id             String               @id @default(uuid())
  name           String
  description    String?
  price          Float
  stock          Int
  isBulk         Boolean              @default(false)
  discount       Float?
  isFeatured     Boolean              @default(false)
  specs          Json?
  categoryId     String
  category       Category             @relation(fields: [categoryId], references: [id])
  brandId        String
  brand          Brand                @relation(fields: [brandId], references: [id])
  similarTo      Product[]            @relation("SimilarProducts")
  similar        Product[]            @relation("SimilarProducts")
  orderItems     OrderItem[]
  images         ProductImage[]
  variants       ProductVariant[]
  ratings        ProductRating[]
  attributes     ProductAttribute[]
  wishlist       Wishlist[]
  cartItems      CartItem[]
  bundleProducts BundleProduct[]
  translations   ProductTranslation[]
  stockAlerts    StockAlert[]
  averageRating  Float?               @default(0)
  ratingCount    Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  bulkProduct  BulkProduct? @relation("BulkProductRelation")
  @@index([name])
}

model BulkProduct {
  id          String    @id @default(uuid())
  name           String?
  description    String?
  productId   String    @unique
  product     Product   @relation("BulkProductRelation", fields: [productId], references: [id])
  bulkPrice   Float
  minQuantity Int
  discount    Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]  
  cartItems   CartItem[]
}


model ProductImage {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  url       String
  isPrimary Boolean @default(false)
}

model ProductVariant {
  id          String       @id @default(uuid())
  productId   String
  product     Product      @relation(fields: [productId], references: [id])
  name        String
  stock       Int
  price       Float?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  stockAlerts StockAlert[]
}

model ProductAttribute {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  key       String
  value     String

  @@index([key, value])
}

model ProductRating {
  id        String        @id @default(uuid())
  productId String
  userId    String
  product   Product       @relation(fields: [productId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  images    RatingImage[]
  createdAt DateTime      @default(now())

  @@unique([productId, userId])
}

model RatingImage {
  id       String        @id @default(uuid())
  ratingId String
  rating   ProductRating @relation(fields: [ratingId], references: [id])
  url      String
}

model ProductTranslation {
  id          String  @id @default(uuid())
  productId   String
  language    String
  name        String
  description String?
  product     Product @relation(fields: [productId], references: [id])

  @@unique([productId, language])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String?
  description String?
  bannerColor String
  bannerText  String
  products    Product[]
  parentId    String?       // Reference to the parent category
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory") // Child categories
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  description String?
  img String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DiscountCode {
  id        String    @id @default(uuid())
  code      String    @unique
  discount  Float
  expiresAt DateTime?
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  isBulk         Int            @default(0)
  total          Float
  status         String         @default("pending")
  address        String
  phoneNumber    String
  discountCodeId String?
  discountCode   DiscountCode?  @relation(fields: [discountCodeId], references: [id])
  orderItems     OrderItem[]
  payments       Payment[]
  notifications  Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  productId String
  variantId String?
  bulkId    String?
  quantity  Int
  price     Float
  
  order     Order           @relation(fields: [orderId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  bulk      BulkProduct?    @relation(fields: [bulkId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float
  method    String
  status    String
  paymentId String?
  createdAt DateTime @default(now())
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  productId String
  variantId String?
  bulkId    String?
  cart      Cart            @relation(fields: [cartId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  bulk      BulkProduct? @relation(fields: [bulkId], references: [id])
  quantity  Int
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
}

model StockAlert {
  id        String          @id @default(uuid())
  userId    String
  productId String
  variantId String?
  user      User            @relation(fields: [userId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())

  @@unique([userId, productId, variantId])
}

model ProductBundle {
  id        String          @id @default(uuid())
  name      String
  discount  Float
  products  BundleProduct[]
  createdAt DateTime        @default(now())
  expiresAt DateTime?
  img       String?
}

model BundleProduct {
  id        String        @id @default(uuid())
  bundleId  String
  productId String
  bundle    ProductBundle @relation(fields: [bundleId], references: [id])
  product   Product       @relation(fields: [productId], references: [id])
  quantity  Int
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  orderId   String?
  order     Order?   @relation(fields: [orderId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
